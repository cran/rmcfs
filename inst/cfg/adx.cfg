verbose=true
debug=false

# how wide is beam of searching
adx.searchBeam=200
# how many rules to leave finally
adx.finalBeam=[500]
# 0:longer complexes  1:shorter complexes
adx.complexGenerality=0
# 0:p-n  1:(p-n)(1-n) 2:(p-n)(1-n)^2  3:max_pos 4:min_neg 5:p(1-n)
adx.qMethod=1
adx.qMethodFinal=2
adx.keepMinimalSet=true
# 0:del n>0     1:del p<n     2: del q<qMin     3:select 'finalBeam' highly estimated by qMethodFinal  4:minimalSet
adx.selSignificantMethod=1
adx.maxEventsForSelection=3000
adx.qMin=0.1

#0:[(p-n)/r]/[(P-N)/R]  1:(p-n)/(P-N)  2:(p/P)*(N/n) 3:(p/P)[1-(n/N)] 4:Prob  5:avgProb   6:avgProb|(p/P)    7:Prob|(p/P)
adx.scoreMethod=6
adx.scoreQ=1

# SENSITIVITY_NO=0;  SENSITIVITY_ARRAY=1;     SENSITIVITY_APRIORI=2;
adx.useSensitivity=0
adx.sensitivityArray=[1]

# REMOVE_NO=0;          REMOVE_IF_WORSE_THAN_SELECTORS_Q=1;     REMOVE_IF_WORSE_THAN_PARENTS_Q=2;
adx.cleanCandidates=2

# MERGE_NO=0; MERGE_ALWAYS=1; MERGE_IF_QUALITY_INCREASED=2;
adx.mergeCondition=0

# discretization parameters
adx.discretizeData=true
adx.discretizerConfigFile=.//cfg_classifiers//discretizer.cfg

adx.ignoreNominalValues=[0]
